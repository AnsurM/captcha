{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","axios","require","App","state","selectedFile","fileChangedHandler","event","console","log","target","files","_this","setState","handleUpload","data","post","then","response","catch","error","fileUploadHandler","fd","FormData","append","react_default","a","createElement","className","type","onChange","this","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kLCIlCC,qBAAQC,EAAQ,KA0DPC,6MAtDbC,MAAQ,CACNC,aAAc,QAGhBC,mBAAqB,SAAAC,GACnBC,QAAQC,IAAI,WAAYF,EAAMG,OAAOC,MAAM,IAC3CC,EAAKC,SAAS,CACZR,aAAcE,EAAMG,OAAOC,MAAM,QAIrCG,aAAe,SAACC,GAGdd,EAAMe,KAAK,8BAA+B,CACxCD,SAEDE,KAAK,SAAUC,GACdV,QAAQC,IAAI,QAASS,KAEtBC,MAAM,SAAUC,GACfZ,QAAQC,IAAIW,QAIhBC,kBAAoB,WAElB,IAAMC,EAAK,IAAIC,SACfD,EAAGE,OAAO,MAAO,mCAAoC,OACrDF,EAAGE,OAAO,SAAU,gBAAiB,UACrCF,EAAGE,OAAO,SAAUZ,EAAKR,MAAMC,aAAc,UAG7CJ,EAAMe,KAAK,8BAA+B,CACxCM,OAEDL,KAAK,SAAUC,GACdV,QAAQC,IAAI,QAASS,KAEtBC,MAAM,SAAUC,GACfZ,QAAQC,IAAIW,8EAKd,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,SAAUC,KAAKzB,qBAClCmB,EAAAC,EAAAC,cAAA,UAAQK,QAASD,KAAKV,mBAAtB,mBAlDUY,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.4414f174.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { Form, Field } from 'react-final-form';\nimport './App.css';\nconst axios = require('axios');\n\nclass App extends Component {\n\n  state = {\n    selectedFile: null\n  }\n\n  fileChangedHandler = event => {\n    console.log(\"File: \\n\", event.target.files[0]);\n    this.setState({\n      selectedFile: event.target.files[0]\n    })\n  }\n\n  handleUpload = (data) =>\n  {\n\n    axios.post('http://localhost:3001/image', {\n      data\n    })\n    .then(function (response) {\n      console.log('Resp ', response);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  fileUploadHandler = () =>\n  {\n    const fd = new FormData();\n    fd.append('key', \"f8e311fbfa848f1d513eb518e8c97252\", 'key');\n    fd.append('method', 'rotatecaptcha', 'method');\n    fd.append('file_1', this.state.selectedFile, 'file_1');\n    // this.handleUpload(fd);\n\n    axios.post('https://2captcha.com/in.php', {\n      fd,\n    })\n    .then(function (response) {\n      console.log('Resp ', response);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"file\" onChange={this.fileChangedHandler} />\n        <button onClick={this.fileUploadHandler}>Upload!</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n{/* <div>\n\n\n{/* <form>\n          Select a file: <input type=\"file\" name=\"myFile\" /><br /><br />\n          <input type=\"submit\" onClick={this.handleSubmit}/>\n        </form>\n      </div> */}\n\n\n\n\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header> */}\n\n\n\n\n\n// <Form\n// onSubmit={this.onSubmit}\n// // validate={validate}\n// render={({ handleSubmit, pristine, invalid }) => (\n//   <form onSubmit={handleSubmit}>\n//     <h2>Simple Default Input</h2>\n//     <div>\n//       <label>Image</label>\n//       <input type=\"file\" name=\"image\" />\n//       <Field name=\"image\" component=\"file\" placeholder=\"select image\" />\n//     </div>\n\n//     {/* <h2>An Arbitrary Reusable Input Component</h2>\n//     <div>\n//       <label>Interests</label>\n//       <Field name=\"interests\" component={InterestPicker} />\n//     </div>\n\n//     <h2>Render Function</h2>\n//     <Field\n//       name=\"bio\"\n//       render={({ input, meta }) => (\n//         <div>\n//           <label>Bio</label>\n//           <textarea {...input} />\n//           {meta.touched && meta.error && <span>{meta.error}</span>}\n//         </div>\n//       )}\n//     />\n\n//     <h2>Render Function as Children</h2>\n//     <Field name=\"phone\">\n//       {({ input, meta }) => (\n//         <div>\n//           <label>Phone</label>\n//           <input type=\"text\" {...input} placeholder=\"Phone\" />\n//           {meta.touched && meta.error && <span>{meta.error}</span>}\n//         </div>\n//       )}\n//     </Field> */}\n\n//     {/* <button type=\"submit\" disabled={pristine || invalid}> */}\n//     <button type=\"submit\" disabled={invalid}>\n//       Submit\n//     </button>\n//   </form>\n// )}\n// />\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}